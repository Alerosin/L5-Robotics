// Generated by gencpp from file l5_robots/Obstacles.msg
// DO NOT EDIT!


#ifndef L5_ROBOTS_MESSAGE_OBSTACLES_H
#define L5_ROBOTS_MESSAGE_OBSTACLES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace l5_robots
{
template <class ContainerAllocator>
struct Obstacles_
{
  typedef Obstacles_<ContainerAllocator> Type;

  Obstacles_()
    : angles()
    , distances()
    , max_range(0.0)  {
    }
  Obstacles_(const ContainerAllocator& _alloc)
    : angles(_alloc)
    , distances(_alloc)
    , max_range(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _angles_type;
  _angles_type angles;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _distances_type;
  _distances_type distances;

   typedef float _max_range_type;
  _max_range_type max_range;




  typedef boost::shared_ptr< ::l5_robots::Obstacles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::l5_robots::Obstacles_<ContainerAllocator> const> ConstPtr;

}; // struct Obstacles_

typedef ::l5_robots::Obstacles_<std::allocator<void> > Obstacles;

typedef boost::shared_ptr< ::l5_robots::Obstacles > ObstaclesPtr;
typedef boost::shared_ptr< ::l5_robots::Obstacles const> ObstaclesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::l5_robots::Obstacles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::l5_robots::Obstacles_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace l5_robots

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'l5_robots': ['/home/alex/catkin_ws/src/l5_robots/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::l5_robots::Obstacles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::l5_robots::Obstacles_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::l5_robots::Obstacles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::l5_robots::Obstacles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::l5_robots::Obstacles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::l5_robots::Obstacles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::l5_robots::Obstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4091faabcc1f00827c0de46a68c91753";
  }

  static const char* value(const ::l5_robots::Obstacles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4091faabcc1f0082ULL;
  static const uint64_t static_value2 = 0x7c0de46a68c91753ULL;
};

template<class ContainerAllocator>
struct DataType< ::l5_robots::Obstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "l5_robots/Obstacles";
  }

  static const char* value(const ::l5_robots::Obstacles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::l5_robots::Obstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] angles\n\
float32[] distances\n\
float32 max_range\n\
";
  }

  static const char* value(const ::l5_robots::Obstacles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::l5_robots::Obstacles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angles);
      stream.next(m.distances);
      stream.next(m.max_range);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Obstacles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::l5_robots::Obstacles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::l5_robots::Obstacles_<ContainerAllocator>& v)
  {
    s << indent << "angles[]" << std::endl;
    for (size_t i = 0; i < v.angles.size(); ++i)
    {
      s << indent << "  angles[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angles[i]);
    }
    s << indent << "distances[]" << std::endl;
    for (size_t i = 0; i < v.distances.size(); ++i)
    {
      s << indent << "  distances[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.distances[i]);
    }
    s << indent << "max_range: ";
    Printer<float>::stream(s, indent + "  ", v.max_range);
  }
};

} // namespace message_operations
} // namespace ros

#endif // L5_ROBOTS_MESSAGE_OBSTACLES_H
